name: Manual run

on:
  workflow_dispatch:
    branches:
      - master
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging

jobs:
  build:
    name: Build Apps
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version
        run: |
          # Get version
          version=0.0.1+${{ github.run_id }}

          # Update the pubspec.yaml file with the new version number
          sed -i '' 's/version: .*/version: $version/' pubspec.yaml

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.2'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:' # optional, change this to specify the cache path
          architecture: x64

      - name: Install pub Dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run Tests
        run: flutter test

      - name: Setup Certificate ios
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_DEVELOPMENT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DEVELOPMENT_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Download Android keystore
        run: |
          echo -n "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode -o android/app/upload-keystore.keystore

      - name: Create key.properties
        run: |
          echo -n "${{ secrets.KEY_PROPERTIES }}" | base64 --decode --output android/key.properties

      - name: Build Android App
        run: |
          flutter build apk --dart-define FLAVOR="${{ github.event.inputs.environment }}"
          ls -la

      - name: AppCenter deploy android
        uses: charliealbright/appcenter-cli-action@v1.0.1
        with:
          token: ${{secrets.APPCENTER_API_TOKEN_ANDROID}}
          command: "appcenter distribute release -f build/app/outputs/flutter-apk/app-release.apk --app vbee/VBEE-ANDROID --group ${{ github.event.inputs.environment == 'development' && 'Development' || 'Staging' }}"

      - name: Build iOS App
        run: |
          flutter build ipa --export-options-plist ios/export_development.plist --dart-define FLAVOR="${{ github.event.inputs.environment }}"

      - name: AppCenter deploy ios
        uses: charliealbright/appcenter-cli-action@v1.0.1
        with:
          token: ${{secrets.APPCENTER_API_TOKEN_IOS}}
          command: "appcenter distribute release -f build/ios/ipa/vbee_tts_app.ipa --app vbee/VBEE-IOS --group ${{ github.event.inputs.environment == 'development' && 'Development' || 'Staging' }}"


