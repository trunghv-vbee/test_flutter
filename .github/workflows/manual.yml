name: Manual run

on:
  workflow_dispatch:
    branches:
      - master
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  build:
    name: Build Apps
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: Setup Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles



      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install pub Dependencies
        run: flutter pub get
      
      #      - name: Generate JSON serialization code for models
      #        run: flutter pub run build_runner build --delete-conflicting-outputs
      #
      #      - name: Run flutter analyzer
      #        run: flutter analyze
      #
      #      - name: Run Tests
      #        run: flutter test
      #      - name: Download Android keystore
      #        id: android_keystore
      #        uses: timheuer/base64-to-file@v1.0.3
      #        with:
      #          fileName: upload-keystore.keystore
      #          encodedString: ${{ secrets.KEYSTORE_BASE64 }}
      #      - name: Create key.properties
      #        run: |
      #          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
      #          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
      #          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      #          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
      #      - name: Build Android App
      #        run: |
      #          flutter build apk --dart-define FLAVOR="${{ github.event.inputs.environment }}"
      #          ls -la
      #      - name: Build iOS App
      #        run: |
      #          flutter build ios --no-codesign --dart-define FLAVOR="${{ github.event.inputs.environment }}"
      #          cd build/ios/iphoneos
      #          mkdir Payload
      #          cd Payload
      #          ln -s ../Runner.app
      #          cd ..
      #          zip -r app.ipa Payload
      #      - name: AppCenter CLI Action
      #        uses: charliealbright/appcenter-cli-action@v1.0.1
      #        with:
      #          token: ${{secrets.APPCENTER_API_TOKEN}}
      #          command: 'appcenter distribute release -f build/app/outputs/flutter-apk/app-release.apk --app trunghv-vbee.ai/APP --group DEV'
      #      - name: AppCenter CLI Action
      #        uses: charliealbright/appcenter-cli-action@v1.0.1
      #        with:
      #          token: ${{secrets.APPCENTER_API_TOKEN}}
      #          command: 'appcenter distribute release -f build/ios/iphoneos/app.ipa --app trunghv-vbee.ai/APP-IOS --group DEV'



      - name: build archive
        run: |
          xcodebuild -scheme "Runner" \
          -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

          - name: export ipa
            env:
              EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
            run: |
              EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
              echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
              xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

          - name: Upload application
            uses: actions/upload-artifact@v3
            with:
              name: app
              path: ${{ runner.temp }}/build/Runner.ipa
              # you can also archive the entire directory
              # path: ${{ runner.temp }}/build
              retention-days: 3