name: Development2

on:
  push:
    branches:
      - main
jobs:
  android:
    name: Build Android
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version name
        run: |
          # Get the tag name from the GitHub event
          TAG_NAME=${{ github.event.release.tag_name }}

          # Get version by removing the "v" from the tag name
          VERSION=0.0.1+${{ github.run_number }}

          # Update the pubspec.yaml file with the new version number
          sed -i '' "s/version: .*/version: $VERSION/" pubspec.yaml  

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install package dependencies
        run: flutter pub get

      #      - name: Generate JSON serialization code for models
      #        run: flutter pub run build_runner build --delete-conflicting-outputs
      #
      #      - name: Run flutter analyzer
      #        run: flutter analyze
      #
      #      - name: Run tests
      #        run: flutter test

      - name: Setup iOS signing certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_DEVELOPMENT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DEVELOPMENT_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles



      - name: Build iOS application
        env:
          FLAVOR: staging
          WORKSPACE: ios/Runner.xcworkspace
          ARCHIVE_PATH: build/ios/archive/Runner.xcarchive
          EXPORT_PATH: ios/export
          EXPORT_OPTIONS_PLIST: ios/export_development.plist
        run: |
          flutter build ipa --release --no-codesign
          xcodebuild -exportArchive  -exportOptionsPlist $EXPORT_OPTIONS_PLIST -exportArchive -archivePath $ARCHIVE_PATH -exportPath $EXPORT_PATH


      - name: Set up AppCenter CLI
        run: sudo npm install -g appcenter-cli

      - name: Distribute to AppCenter
        env:
          APP_CENTER_IOS_API_TOKEN: ${{ secrets.APP_CENTER_IOS_API_TOKEN }}
          APP: trunghv-vbee.ai/APP-IOS
          GROUP: DEV
          FILE_PATH: ios/export/*.ipa
        run: appcenter distribute release --token $APP_CENTER_IOS_API_TOKEN -f $FILE_PATH --app $APP --group $GROUP

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
