name: Release

on:
  release:
    types: [published]

jobs:
  android-staging:
    name: Build android
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version name
        run: |
          # Generate version
          TAG_NAME=${{ github.event.release.tag_name }}
          
          # Update the pubspec.yaml file with the new version number
          VERSION=${TAG_NAME#v}+${{ github.run_number }}
          
          # Update the pubspec.yaml file with the new version number
          sudo sed -i "s/version: .*/version: $VERSION/" pubspec.yaml  

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install package dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Set up Keystore
        run: |
          echo -n "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.keystore
          echo -n "${{ secrets.KEY_PROPERTIES }}" | base64 --decode > android/key.properties

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"

      - name: Build Android application
        env:
          FLAVOR: staging
        run: |
          flutter build apk --dart-define FLAVOR=$FLAVOR

      - name: Set up AppCenter CLI
        run: sudo npm install -g appcenter-cli

      - name: Distribute to AppCenter
        env:
          APP_CENTER_ANDROID_API_TOKEN: ${{ secrets.APP_CENTER_ANDROID_API_TOKEN }}
          APP: vbee/VBEE-ANDROID
          GROUP: Staging
          FILE_PATH: build/app/outputs/flutter-apk/app-release.apk
        run: |
          appcenter distribute release --token $APP_CENTER_ANDROID_API_TOKEN -f $FILE_PATH --app $APP --group $GROUP

  ios-staging:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version name
        run: |
          # Get the tag name from the GitHub event
          TAG_NAME=${{ github.event.release.tag_name }}

          # Get version by removing the "v" from the tag name
          VERSION=${TAG_NAME#v}+${{ github.run_number }}

          # Update the pubspec.yaml file with the new version number
          sed -i '' "s/version: .*/version: $VERSION/" pubspec.yaml  

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install package dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Setup iOS signing certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_DEVELOPMENT_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DEVELOPMENT_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS application
        env:
          FLAVOR: staging
        run: flutter build ipa --export-options-plist ios/export_development.plist --dart-define FLAVOR=$FLAVOR

      - name: Set up AppCenter CLI
        run: sudo npm install -g appcenter-cli

      - name: Distribute to AppCenter
        env:
          APP_CENTER_ANDROID_API_TOKEN: ${{ secrets.APP_CENTER_IOS_API_TOKEN }}
          APP: vbee/VBEE-IOS
          GROUP: Staging
          FILE_PATH: build/ios/ipa/vbee_tts_app.ipa
        run: |
          appcenter distribute release --token $APP_CENTER_IOS_API_TOKEN -f $FILE_PATH --app $APP --group $GROUP

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  android-production:
    name: Build android
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version name
        run: |
          # Get the tag name from the GitHub event
          TAG_NAME=${{ github.event.release.tag_name }}

          # Get version by removing the "v" from the tag name
          VERSION=${TAG_NAME#v}+${{ github.run_number }}

          # Update the pubspec.yaml file with the new version number
          sudo sed -i "s/version: .*/version: $VERSION/" pubspec.yaml  

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install package dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"

      - name: Set up Keystore
        run: |
          echo -n "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.keystore
          echo -n "${{ secrets.KEY_PROPERTIES }}" | base64 --decode > android/key.properties

      - name: Build Android App
        run: |
          flutter build appbundle

      - name: Create service_account.json
        run: echo -n "${{ secrets.SERVICE_ACCOUNT_JSON }}" | base64 --decode --output android/app/service_account.json

      - name: Deploy to Internal google play store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: android/app/service_account.json
          packageName: vn.vbee.tts
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: draft

  ios-production:
    name: Build ios
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version name
        run: |
          # Get the tag name from the GitHub event
          TAG_NAME=${{ github.event.release.tag_name }}

          # Get version by removing the "v" from the tag name
          VERSION=${TAG_NAME#v}+${{ github.run_number }}

          # Update the pubspec.yaml file with the new version number
          sed -i '' "s/version: .*/version: $VERSION/" pubspec.yaml  

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install package dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Setup Certificate ios
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_DISTRIBUTION_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DISTRIBUTION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS App
        run: |
          flutter build ipa --export-options-plist ios/export_distribution.plist

      - name: Install private API key p8
        run: |
          mkdir -p ~/private_keys
          echo -n "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
      - name: Upload app to TestFlight
        run: |
          xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey ${{ secrets.APPSTORE_API_KEY_ID }}  --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
