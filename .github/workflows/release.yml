name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build Apps
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Update version
        run: |
          perl -i -pe 's/^(version:\s+)(\d+\.\d+\.\d+)(\+)(\d+)$/$1.("${{ github.ref_name }}").$3.(${{github.run_number}})/e' pubspec.yaml 

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"

      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.16.2'
          channel: 'stable'

      - name: Install pub Dependencies
        run: flutter pub get

      - name: Generate JSON serialization code for models
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run flutter analyzer
        run: flutter analyze

      - name: Run Tests
        run: flutter test


      - name: Setup Certificate ios
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_DISTRIBUTION_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_DISTRIBUTION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Download Android keystore
        run: |
          echo -n "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode -o android/app/upload-keystore.keystore

      - name: Create key.properties
        run: |
          echo "storeFile=upload-keystore.keystore" > android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

      - name: Build Android App
        run: |
          flutter build appbundle
          ls -la

      - name: Create service_account.json
        run: echo -n "${{ secrets.SERVICE_ACCOUNT_JSON }}" | base64 --decode --output android/app/service_account.json

      - name: Deploy to Internal google play store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: android/app/service_account.json
          packageName: vn.vbee.tts2
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal

      - name: Build iOS App
        run: |
          flutter build ipa --export-options-plist ios/export_distribution.plist

      - name: Install private API key p8
        run: |
          mkdir -p ~/private_keys
          echo -n "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
      - name: Upload app to TestFlight
        run: |
          xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey ${{ secrets.APPSTORE_API_KEY_ID }}  --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}


      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      - name: Release Apps
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: ${{ github.ref }}
          token: ${{ secrets.GH_TOKEN }}
          artifacts: 'build/app/outputs/apk/release/*.apk,build/ios/iphoneos/app.ipa'